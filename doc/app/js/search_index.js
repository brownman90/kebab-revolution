var search_data = {"index":{"searchIndex":["application","applicationcontroller","feedbackcontroller","kebab","notifiermailer","pagescontroller","passwordscontroller","payment","plan","privilege","resource","role","sessionscontroller","subscription","tenant","tenantmailer","tenantscopedmodel","tenantscontroller","user","usermailer","userscontroller","acl()","active()","add_error()","add_notice()","authenticate()","authorize()","bootstrap()","build_default_scope()","configure()","create()","create()","create()","create()","create()","create_tenant()","current()","current=()","desktop()","destroy()","destroy()","find_finished_trials()","find_payment_failures()","find_trials_without_recurring_profile()","forget_password()","get_applications()","get_privileges()","get_resources()","i18n_locale()","i18n_locale_from_param()","i18n_locale_from_session()","index()","index()","invite()","is_owner()","login()","login()","logout()","passive()","payment_failures_5_days_ago()","payment_failures_cancel_tenant()","paypal_credential()","paypal_recurring_payment()","plans()","reach_user_limit?()","register()","send_feedback()","set_invoice_no()","show()","show()","tenant()","trial_10_days_from_now()","trial_5_days_from_now()","trial_cancel_tenant()","update()","update()","valid_host()","with()","readme_for_app"],"longSearchIndex":["application","applicationcontroller","feedbackcontroller","kebab","notifiermailer","pagescontroller","passwordscontroller","payment","plan","privilege","resource","role","sessionscontroller","subscription","tenant","tenantmailer","tenantscopedmodel","tenantscontroller","user","usermailer","userscontroller","applicationcontroller#acl()","userscontroller#active()","applicationcontroller#add_error()","applicationcontroller#add_notice()","applicationcontroller#authenticate()","applicationcontroller#authorize()","applicationcontroller#bootstrap()","tenantscopedmodel::build_default_scope()","kebab::configure()","feedbackcontroller#create()","passwordscontroller#create()","sessionscontroller#create()","tenantscontroller#create()","userscontroller#create()","tenantmailer#create_tenant()","tenant::current()","tenant::current=()","pagescontroller#desktop()","sessionscontroller#destroy()","tenantscontroller#destroy()","subscription::find_finished_trials()","subscription::find_payment_failures()","subscription::find_trials_without_recurring_profile()","usermailer#forget_password()","user#get_applications()","user#get_privileges()","user#get_resources()","applicationcontroller#i18n_locale()","applicationcontroller#i18n_locale_from_param()","applicationcontroller#i18n_locale_from_session()","pagescontroller#index()","userscontroller#index()","usermailer#invite()","applicationcontroller#is_owner()","applicationcontroller#login()","pagescontroller#login()","applicationcontroller#logout()","userscontroller#passive()","notifiermailer#payment_failures_5_days_ago()","notifiermailer#payment_failures_cancel_tenant()","applicationcontroller#paypal_credential()","applicationcontroller#paypal_recurring_payment()","pagescontroller#plans()","applicationcontroller#reach_user_limit?()","pagescontroller#register()","usermailer#send_feedback()","payment#set_invoice_no()","tenantscontroller#show()","userscontroller#show()","applicationcontroller#tenant()","notifiermailer#trial_10_days_from_now()","notifiermailer#trial_5_days_from_now()","notifiermailer#trial_cancel_tenant()","passwordscontroller#update()","userscontroller#update()","tenantscontroller#valid_host()","tenant#with()",""],"info":[["Application","","Application.html","","<p>App Model\n"],["ApplicationController","","ApplicationController.html","","<p>Application Controller\n"],["FeedbackController","","FeedbackController.html","","<p>FeedbackController\n"],["Kebab","","Kebab.html","","<p>KBBTODO rdoc KBBTODO test\n"],["NotifierMailer","","NotifierMailer.html","","<p>email: “oozgurozkan@gmail.com”, locale: “tr”, next_payment_date:\n“2012-01-24T00:48:39Z”, …\n"],["PagesController","","PagesController.html","","<p>Pages Controller\n"],["PasswordsController","","PasswordsController.html","","<p>Password Controller\n"],["Payment","","Payment.html","","<p>Payment Model\n"],["Plan","","Plan.html","","<p>Subscription Plan Model\n"],["Privilege","","Privilege.html","","<p>Privilege Model\n"],["Resource","","Resource.html","","<p>Resource Model\n"],["Role","","Role.html","","<p>Role Model\n"],["SessionsController","","SessionsController.html","","<p>Sessions Controller\n"],["Subscription","","Subscription.html","","<p>Subscription Model\n"],["Tenant","","Tenant.html","","<p>Tenant Model\n"],["TenantMailer","","TenantMailer.html","","<p>Tenant Mailer\n"],["TenantScopedModel","","TenantScopedModel.html","","<p>Tenant Scope Model\n<p>TenantScopedModel manages all multi tenant system for more information see\nthe Samuek …\n"],["TenantsController","","TenantsController.html","","<p>Tenants Controller\n"],["User","","User.html","","<p>User Model\n"],["UserMailer","","UserMailer.html","","<p>User Mailer\n"],["UsersController","","UsersController.html","","<p>Users Controller\n"],["acl","ApplicationController","ApplicationController.html#method-i-acl","()","<p>Protected: Return users acl array\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">acl</span>\n<span class=\"ruby-comment\">#=&gt; {</span>\n<span class=\"ruby-comment\">#=&gt;  'sessions/create',</span>\n<span class=\"ruby-comment\">#=&gt;  'sessions/destroy'</span>\n<span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["active","UsersController","UsersController.html#method-i-active","()","<p>POST/users/active\n"],["add_error","ApplicationController","ApplicationController.html#method-i-add_error","(id, message)","<p>Protected: Add an error at @@response\n<p>id      - String - Form element id where error is showed message …\n"],["add_notice","ApplicationController","ApplicationController.html#method-i-add_notice","(type, message)","<p>Protected: Add a notice at @@response\n<p>type    - String - Message type like ERROR, INFO, NOTICE message …\n"],["authenticate","ApplicationController","ApplicationController.html#method-i-authenticate","()","<p>Protected: Check user authentication\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">authenticate</span>\n<span class=\"ruby-comment\"># =&gt; {success: false} # status 403 unless there ...</span>\n</pre>\n"],["authorize","ApplicationController","ApplicationController.html#method-i-authorize","()","<p>Protected: Check user authorize\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">authorize</span>\n<span class=\"ruby-comment\"># =&gt; {success: false} # status 401</span>\n<span class=\"ruby-comment\"># =&gt; nil</span>\n</pre>\n"],["bootstrap","ApplicationController","ApplicationController.html#method-i-bootstrap","(tenant = true)","<p>Protected: bootstrap\n<p>tenant  boolean\n<p>Return hash\n"],["build_default_scope","TenantScopedModel","TenantScopedModel.html#method-c-build_default_scope","()","<p>Public Static: Built default scope\n"],["configure","Kebab","Kebab.html#method-c-configure","(&block)",""],["create","FeedbackController","FeedbackController.html#method-i-create","()","<p>POST/feedback\n"],["create","PasswordsController","PasswordsController.html#method-i-create","()","<p>POST/passwords KBBTODO #62 send activation for forget password\n"],["create","SessionsController","SessionsController.html#method-i-create","()","<p>POST/sessions\n"],["create","TenantsController","TenantsController.html#method-i-create","()","<p>POST/tenants\n"],["create","UsersController","UsersController.html#method-i-create","()","<p>POST/users\n"],["create_tenant","TenantMailer","TenantMailer.html#method-i-create_tenant","(user, tenant, subscription)","<p>Public: Create new tenant mail\n<p>tenant        - tenant object instance of TenantModel user          - user\n…\n"],["current","Tenant","Tenant.html#method-c-current","()","<p>Public: Return current tenant\n"],["current=","Tenant","Tenant.html#method-c-current-3D","(tenant)","<p>Public: Set current tenant\n"],["desktop","PagesController","PagesController.html#method-i-desktop","()","<p>GET/pages/desktop\n"],["destroy","SessionsController","SessionsController.html#method-i-destroy","()","<p>DELETE/sessions\n"],["destroy","TenantsController","TenantsController.html#method-i-destroy","()","<p>DELETE/tenants/:id KBBTODO move all delete code to tenants#delete private\nmethod\n"],["find_finished_trials","Subscription","Subscription.html#method-c-find_finished_trials","()","<p>Find due trials to cancel account\n"],["find_payment_failures","Subscription","Subscription.html#method-c-find_payment_failures","(next_payment_date = 10.days.ago)",""],["find_trials_without_recurring_profile","Subscription","Subscription.html#method-c-find_trials_without_recurring_profile","(next_payment_date = 10.days.from_now)",""],["forget_password","UserMailer","UserMailer.html#method-i-forget_password","(user)","<p>Public: Send forget password mail\n<p>user - user object instance of UserModel\n"],["get_applications","User","User.html#method-i-get_applications","()","<p>Public: Return users apps hash KBBTODO refactor methods in loop\n"],["get_privileges","User","User.html#method-i-get_privileges","()","<p>Pubic: Return users privileges hash KBBTODO refactor methods in loop\n"],["get_resources","User","User.html#method-i-get_resources","()","<p>Public: Return users resources hash KBBTODO refactor methods in loop\n"],["i18n_locale","ApplicationController","ApplicationController.html#method-i-i18n_locale","()","<p>Protected: Set locale\n<p>First check params, then session, then default value at config file.\n<p>Examples\n"],["i18n_locale_from_param","ApplicationController","ApplicationController.html#method-i-i18n_locale_from_param","()","<p>Protected: Return locale value from param if exist\n<p>Returns String\n"],["i18n_locale_from_session","ApplicationController","ApplicationController.html#method-i-i18n_locale_from_session","()","<p>Protected: Return locale value from session if exist\n<p>Returns String\n"],["index","PagesController","PagesController.html#method-i-index","()","<p>GET/pages/index\n"],["index","UsersController","UsersController.html#method-i-index","()","<p>GET/users\n"],["invite","UserMailer","UserMailer.html#method-i-invite","(user)","<p>Public: Invite\n<p>user    - object - User Model\n"],["is_owner","ApplicationController","ApplicationController.html#method-i-is_owner","(id)","<p>Protected: is_owner\n<p>id    Integer\n<p>Return boolean\n"],["login","ApplicationController","ApplicationController.html#method-i-login","(user, password)","<p>Protected: login\n<p>user      UserModel password  String\n<p>Return boolean\n"],["login","PagesController","PagesController.html#method-i-login","()","<p>GET/pages/login\n"],["logout","ApplicationController","ApplicationController.html#method-i-logout","()","<p>Protected: logout\n"],["passive","UsersController","UsersController.html#method-i-passive","()","<p>POST/users/passive\n"],["payment_failures_5_days_ago","NotifierMailer","NotifierMailer.html#method-i-payment_failures_5_days_ago","(subscription)","<p>After 5 days\n"],["payment_failures_cancel_tenant","NotifierMailer","NotifierMailer.html#method-i-payment_failures_cancel_tenant","(subscription)","<p>After 10 days\n"],["paypal_credential","ApplicationController","ApplicationController.html#method-i-paypal_credential","(plan)","<p>Protected: Create a credentials\n"],["paypal_recurring_payment","ApplicationController","ApplicationController.html#method-i-paypal_recurring_payment","(plan, reference, payer_id, token)","<p>Protected: Create a recurring payment\n<p>Return Recurring ProfileId\n"],["plans","PagesController","PagesController.html#method-i-plans","()","<p>GET/pages/plans\n"],["reach_user_limit?","ApplicationController","ApplicationController.html#method-i-reach_user_limit-3F","()","<p>Protected reach_user_limit?\n<p>Return boolean\n"],["register","PagesController","PagesController.html#method-i-register","()","<p>GET/pages/register\n"],["send_feedback","UserMailer","UserMailer.html#method-i-send_feedback","(user, subject, message)","<p>Public: Send feedback\n<p>subject - string body    - text user    - object - User Model\n"],["set_invoice_no","Payment","Payment.html#method-i-set_invoice_no","()",""],["show","TenantsController","TenantsController.html#method-i-show","()","<p>GET/tenant/1\n"],["show","UsersController","UsersController.html#method-i-show","()","<p>GET/users/:id\n"],["tenant","ApplicationController","ApplicationController.html#method-i-tenant","()","<p>Protected: Check current tenant\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tenant</span>\n<span class=\"ruby-comment\"># =&gt; {success: false, notice: 'Invalid tenant'} #status ...</span>\n</pre>\n"],["trial_10_days_from_now","NotifierMailer","NotifierMailer.html#method-i-trial_10_days_from_now","(subscription)","<p>Before 10 days\n"],["trial_5_days_from_now","NotifierMailer","NotifierMailer.html#method-i-trial_5_days_from_now","(subscription)","<p>Before 5 days\n"],["trial_cancel_tenant","NotifierMailer","NotifierMailer.html#method-i-trial_cancel_tenant","(subscription)","<p>The same time\n"],["update","PasswordsController","PasswordsController.html#method-i-update","()","<p>PUT/passwords\n"],["update","UsersController","UsersController.html#method-i-update","()","<p>PUT/users/\n"],["valid_host","TenantsController","TenantsController.html#method-i-valid_host","()","<p>GET/tenants/valid_host?host=host_name KBBTODO #64 set invalid tenant from\none place\n"],["with","Tenant","Tenant.html#method-i-with","()",""],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>Kebab 2.x - Server Ror\n<p>Links\n<p>Web Site -(www.kebab-project.com)\n"]]}}