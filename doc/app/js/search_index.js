var search_data = {"index":{"searchIndex":["application","applicationcontroller","kebab","notifiermailer","oscontroller","pagescontroller","passwordscontroller","payment","plan","privilege","resource","role","sessionscontroller","subscription","subscriptionscontroller","tenant","tenantmailer","tenantobserver","tenantscontroller","user","usermailer","userscontroller","acl()","add_error()","add_notice()","after_create()","app_runner()","authenticate()","authorize()","bootstrap()","change_plan_type()","commercial_to_free()","configure()","create()","create()","create()","create()","create_tenant()","desktop()","destroy()","destroy()","disable()","disable()","downgrade()","enable()","enable()","filter()","find_finished_trials()","find_payment()","find_payment_failures()","find_trials_without_recurring_profile()","forget_password()","free_to_commercial()","i18n_locale()","i18n_locale_from_param()","i18n_locale_from_session()","index()","index()","invite()","is_owner()","limits()","log_client_info()","login()","login()","logout()","missing_translation()","missing_translation()","next_subscription()","payment_failures_5_days_ago()","payment_failures_cancel_tenant()","payments()","paypal_credential()","paypal_recurring_payment_failed()","paypal_recurring_payment_success()","plans()","plans()","reach_plan_user_limit?()","reach_user_limit?()","register()","set_invoice_no()","set_response()","set_time_zone()","show()","show()","sort()","tenant()","trial_10_days_from_now()","trial_5_days_from_now()","trial_cancel_tenant()","update()","update()","update()","upgrade()","valid_subdomain()","readme_for_app"],"longSearchIndex":["application","applicationcontroller","kebab","notifiermailer","oscontroller","pagescontroller","passwordscontroller","payment","plan","privilege","resource","role","sessionscontroller","subscription","subscriptionscontroller","tenant","tenantmailer","tenantobserver","tenantscontroller","user","usermailer","userscontroller","applicationcontroller#acl()","applicationcontroller#add_error()","applicationcontroller#add_notice()","tenantobserver#after_create()","oscontroller#app_runner()","applicationcontroller#authenticate()","applicationcontroller#authorize()","applicationcontroller#bootstrap()","subscription::change_plan_type()","subscription::commercial_to_free()","kebab::configure()","passwordscontroller#create()","sessionscontroller#create()","tenantscontroller#create()","userscontroller#create()","tenantmailer#create_tenant()","oscontroller#desktop()","sessionscontroller#destroy()","tenantscontroller#destroy()","usermailer#disable()","userscontroller#disable()","subscription::downgrade()","usermailer#enable()","userscontroller#enable()","applicationcontroller#filter()","subscription::find_finished_trials()","subscription::find_payment()","subscription::find_payment_failures()","subscription::find_trials_without_recurring_profile()","usermailer#forget_password()","subscription::free_to_commercial()","applicationcontroller#i18n_locale()","applicationcontroller#i18n_locale_from_param()","applicationcontroller#i18n_locale_from_session()","pagescontroller#index()","userscontroller#index()","usermailer#invite()","applicationcontroller#is_owner()","subscriptionscontroller#limits()","applicationcontroller#log_client_info()","applicationcontroller#login()","oscontroller#login()","applicationcontroller#logout()","oscontroller#missing_translation()","pagescontroller#missing_translation()","subscriptionscontroller#next_subscription()","notifiermailer#payment_failures_5_days_ago()","notifiermailer#payment_failures_cancel_tenant()","subscriptionscontroller#payments()","subscriptionscontroller#paypal_credential()","subscriptionscontroller#paypal_recurring_payment_failed()","subscriptionscontroller#paypal_recurring_payment_success()","pagescontroller#plans()","subscriptionscontroller#plans()","applicationcontroller#reach_plan_user_limit?()","applicationcontroller#reach_user_limit?()","pagescontroller#register()","payment#set_invoice_no()","applicationcontroller#set_response()","applicationcontroller#set_time_zone()","tenantscontroller#show()","userscontroller#show()","applicationcontroller#sort()","applicationcontroller#tenant()","notifiermailer#trial_10_days_from_now()","notifiermailer#trial_5_days_from_now()","notifiermailer#trial_cancel_tenant()","passwordscontroller#update()","subscriptionscontroller#update()","userscontroller#update()","subscription::upgrade()","tenantscontroller#valid_subdomain()",""],"info":[["Application","","Application.html","","<p>App Model\n"],["ApplicationController","","ApplicationController.html","","<p>Application Controller\n"],["Kebab","","Kebab.html","","<p>KBBTODO rdoc KBBTODO test Kebab Module\n"],["NotifierMailer","","NotifierMailer.html","","<p>email: “oozgurozkan@gmail.com”, locale: “tr”, next_payment_date:\n“2012-01-24T00:48:39Z”, …\n"],["OsController","","OsController.html","","<p>Kebab 2.0 - Server Ror\n<p>Author &mdash; Onur Özgür ÖZKAN &lt;onur.ozgur.ozkan@lab2023.com&gt;\n<p>Copyright &mdash; Copyright …\n"],["PagesController","","PagesController.html","","<p>Kebab 2.0 - Server Ror\n<p>Author &mdash; Onur Özgür ÖZKAN &lt;onur.ozgur.ozkan@lab2023.com&gt;\n<p>Copyright &mdash; Copyright …\n"],["PasswordsController","","PasswordsController.html","","<p>Password Controller\n"],["Payment","","Payment.html","","<p>Payment Model\n"],["Plan","","Plan.html","","<p>Subscription Plan Model\n"],["Privilege","","Privilege.html","","<p>Privilege Model\n"],["Resource","","Resource.html","","<p>Resource Model\n"],["Role","","Role.html","","<p>Role Model\n"],["SessionsController","","SessionsController.html","","<p>Sessions Controller\n"],["Subscription","","Subscription.html","","<p>Subscription Model\n"],["SubscriptionsController","","SubscriptionsController.html","","<p>Kebab 2.0 - Server Ror\n<p>Author &mdash; Onur Özgür ÖZKAN &lt;onur.ozgur.ozkan@lab2023.com&gt;\n<p>Copyright &mdash; Copyright …\n"],["Tenant","","Tenant.html","","<p>Tenant Model\n"],["TenantMailer","","TenantMailer.html","","<p>Tenant Mailer\n"],["TenantObserver","","TenantObserver.html","",""],["TenantsController","","TenantsController.html","","<p>Tenants Controller\n"],["User","","User.html","","<p>User Model\n"],["UserMailer","","UserMailer.html","","<p>User Mailer\n"],["UsersController","","UsersController.html","","<p>Users Controller\n"],["acl","ApplicationController","ApplicationController.html#method-i-acl","()","<p>Protected: Return users acl array\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">acl</span>\n<span class=\"ruby-comment\">#=&gt; {</span>\n<span class=\"ruby-comment\">#=&gt;  'sessions/create',</span>\n<span class=\"ruby-comment\">#=&gt;  'sessions/destroy'</span>\n<span class=\"ruby-comment\">#=&gt; ...</span>\n</pre>\n"],["add_error","ApplicationController","ApplicationController.html#method-i-add_error","(id, message)","<p>Protected: Add an error at @response\n<p>id      - String - Form element id where error is showed message …\n"],["add_notice","ApplicationController","ApplicationController.html#method-i-add_notice","(type, message)","<p>Protected: Add a notice at @response\n<p>type     - String - Message type like ERROR, INFO, NOTICE messages …\n"],["after_create","TenantObserver","TenantObserver.html#method-i-after_create","(tenant)",""],["app_runner","OsController","OsController.html#method-i-app_runner","()","<p>GET/os/app_runner\n"],["authenticate","ApplicationController","ApplicationController.html#method-i-authenticate","()","<p>Protected: Check user authentication\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">authenticate</span>\n<span class=\"ruby-comment\"># =&gt; {success: false} # status 403 unless there ...</span>\n</pre>\n"],["authorize","ApplicationController","ApplicationController.html#method-i-authorize","()","<p>Protected: Check user authorize\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">authorize</span>\n<span class=\"ruby-comment\"># =&gt; {success: false} # status 401</span>\n<span class=\"ruby-comment\"># =&gt; nil</span>\n</pre>\n"],["bootstrap","ApplicationController","ApplicationController.html#method-i-bootstrap","(tenant = true)","<p>Protected: bootstrap\n<p>tenant  boolean\n<p>Return hash\n"],["change_plan_type","Subscription","Subscription.html#method-c-change_plan_type","(old_plan_id, new_plan_id)","<p>Change plan type\n<p>new_plan_id Integer old_plan_id Integer\n<p>Return false or String\n"],["commercial_to_free","Subscription","Subscription.html#method-c-commercial_to_free","(subscription)","<p>Commercial to free\n<p>We assume that first plan is free plan. We cancel the paypal recurring\npayment profile …\n"],["configure","Kebab","Kebab.html#method-c-configure","(&block)","<p>Configure\n"],["create","PasswordsController","PasswordsController.html#method-i-create","()","<p>POST/passwords KBBTODO #62 send activation for forget password\n"],["create","SessionsController","SessionsController.html#method-i-create","()","<p>POST/sessions\n"],["create","TenantsController","TenantsController.html#method-i-create","()","<p>POST/tenants\n"],["create","UsersController","UsersController.html#method-i-create","()","<p>POST/users\n"],["create_tenant","TenantMailer","TenantMailer.html#method-i-create_tenant","(user, tenant, password)","<p>Public: Create new tenant mail\n<p>tenant        - tenant object instance of TenantModel user          - user\n…\n"],["desktop","OsController","OsController.html#method-i-desktop","()","<p>GET/os/desktop\n"],["destroy","SessionsController","SessionsController.html#method-i-destroy","()","<p>DELETE/sessions\n"],["destroy","TenantsController","TenantsController.html#method-i-destroy","()","<p>DELETE/tenants/:id KBBTODO move all delete code to tenants#delete private\nmethod\n"],["disable","UserMailer","UserMailer.html#method-i-disable","(user)",""],["disable","UsersController","UsersController.html#method-i-disable","()","<p>POST/users/disable\n"],["downgrade","Subscription","Subscription.html#method-c-downgrade","(subscription, new_plan_id)","<p>Downgrade\n<p>new_plan_id Integer\n<p>Return boolean\n"],["enable","UserMailer","UserMailer.html#method-i-enable","(user)",""],["enable","UsersController","UsersController.html#method-i-enable","()","<p>POST/users/enable\n"],["filter","ApplicationController","ApplicationController.html#method-i-filter","(json_string, mapping = false)","<p>Filter\n<p>Return string\n"],["find_finished_trials","Subscription","Subscription.html#method-c-find_finished_trials","()","<p>Find due trials to cancel account\n"],["find_payment","Subscription","Subscription.html#method-c-find_payment","()","<p>Find payments\n"],["find_payment_failures","Subscription","Subscription.html#method-c-find_payment_failures","(next_payment_date = 10.days.ago)","<p>Find payment Failures\n<p>next_payment_date Date\n<p>Return Collection\n"],["find_trials_without_recurring_profile","Subscription","Subscription.html#method-c-find_trials_without_recurring_profile","(next_payment_date = 10.days.from_now)","<p>Find trials subscription without recurring profile\n<p>next_payment_date Date\n<p>Return Collection\n"],["forget_password","UserMailer","UserMailer.html#method-i-forget_password","(user)","<p>Public: Send forget password mail\n<p>user - user object instance of UserModel\n"],["free_to_commercial","Subscription","Subscription.html#method-c-free_to_commercial","(subscription, new_plan_id)","<p>Free to Commercial\n<p>new_plan_id Integer\n<p>Return boolean\n"],["i18n_locale","ApplicationController","ApplicationController.html#method-i-i18n_locale","()","<p>Protected: Set locale\n<p>First check params, then session, then default value at config file.\n<p>Examples\n"],["i18n_locale_from_param","ApplicationController","ApplicationController.html#method-i-i18n_locale_from_param","()","<p>Protected: Return locale value from param if exist\n<p>Returns String\n"],["i18n_locale_from_session","ApplicationController","ApplicationController.html#method-i-i18n_locale_from_session","()","<p>Protected: Return locale value from session if exist\n<p>Returns String\n"],["index","PagesController","PagesController.html#method-i-index","()","<p>GET/pages/index\n"],["index","UsersController","UsersController.html#method-i-index","()","<p>GET/users\n"],["invite","UserMailer","UserMailer.html#method-i-invite","(user, subdomain)","<p>Public: Invite\n<p>user - object - User Model\n"],["is_owner","ApplicationController","ApplicationController.html#method-i-is_owner","(id)","<p>Protected: is_owner\n<p>id    Integer\n<p>Return boolean\n"],["limits","SubscriptionsController","SubscriptionsController.html#method-i-limits","()","<p>Limits\n<p>Return json\n"],["log_client_info","ApplicationController","ApplicationController.html#method-i-log_client_info","()","<p>Request info for logger\n<p>Return string\n"],["login","ApplicationController","ApplicationController.html#method-i-login","(user, password)","<p>Protected: login\n<p>user      UserModel password  String\n<p>Return boolean\n"],["login","OsController","OsController.html#method-i-login","()","<p>GET/os/login\n"],["logout","ApplicationController","ApplicationController.html#method-i-logout","()","<p>Protected: logout\n"],["missing_translation","OsController","OsController.html#method-i-missing_translation","()","<p>POST/pages/missing_translation\n"],["missing_translation","PagesController","PagesController.html#method-i-missing_translation","()","<p>POST/pages/missing_translation\n"],["next_subscription","SubscriptionsController","SubscriptionsController.html#method-i-next_subscription","()","<p>GET/subscriptions/next_subscription\n"],["payment_failures_5_days_ago","NotifierMailer","NotifierMailer.html#method-i-payment_failures_5_days_ago","(subscription)","<p>After 5 days\n"],["payment_failures_cancel_tenant","NotifierMailer","NotifierMailer.html#method-i-payment_failures_cancel_tenant","(subscription)","<p>After 10 days\n"],["payments","SubscriptionsController","SubscriptionsController.html#method-i-payments","()","<p>GET/subscription/payments\n"],["paypal_credential","SubscriptionsController","SubscriptionsController.html#method-i-paypal_credential","()","<p>GET/subscriptions/paypal_credential\n"],["paypal_recurring_payment_failed","SubscriptionsController","SubscriptionsController.html#method-i-paypal_recurring_payment_failed","()","<p>GET/subscriptions/paypal_recurring_payment_failed\n"],["paypal_recurring_payment_success","SubscriptionsController","SubscriptionsController.html#method-i-paypal_recurring_payment_success","()","<p>GET/subscriptions/paypal_recurring_payment_success\n"],["plans","PagesController","PagesController.html#method-i-plans","()","<p>GET/pages/plans\n"],["plans","SubscriptionsController","SubscriptionsController.html#method-i-plans","()","<p>GET/subscriptions/plans\n"],["reach_plan_user_limit?","ApplicationController","ApplicationController.html#method-i-reach_plan_user_limit-3F","(plan_id)","<p>Protected reach_plan_user_limit?\n<p>Return boolean\n"],["reach_user_limit?","ApplicationController","ApplicationController.html#method-i-reach_user_limit-3F","()","<p>Protected reach_user_limit?\n<p>Return boolean\n"],["register","PagesController","PagesController.html#method-i-register","()","<p>GET/pages/register\n"],["set_invoice_no","Payment","Payment.html#method-i-set_invoice_no","()","<p>Set Invoice No\n"],["set_response","ApplicationController","ApplicationController.html#method-i-set_response","()",""],["set_time_zone","ApplicationController","ApplicationController.html#method-i-set_time_zone","()",""],["show","TenantsController","TenantsController.html#method-i-show","()","<p>GET/tenant/1\n"],["show","UsersController","UsersController.html#method-i-show","()","<p>GET/users/:id\n"],["sort","ApplicationController","ApplicationController.html#method-i-sort","(json_string, mapping = false)","<p>Sort\n<p>Return string\n"],["tenant","ApplicationController","ApplicationController.html#method-i-tenant","()","<p>Protected: Check current tenant\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">tenant</span>\n<span class=\"ruby-comment\"># =&gt; {success: false, notice: 'Invalid tenant'} #status ...</span>\n</pre>\n"],["trial_10_days_from_now","NotifierMailer","NotifierMailer.html#method-i-trial_10_days_from_now","(subscription)","<p>Before 10 days\n"],["trial_5_days_from_now","NotifierMailer","NotifierMailer.html#method-i-trial_5_days_from_now","(subscription)","<p>Before 5 days\n"],["trial_cancel_tenant","NotifierMailer","NotifierMailer.html#method-i-trial_cancel_tenant","(subscription)","<p>The same time\n"],["update","PasswordsController","PasswordsController.html#method-i-update","()","<p>PUT/passwords\n"],["update","SubscriptionsController","SubscriptionsController.html#method-i-update","()","<p>PUT/subscriptions\n"],["update","UsersController","UsersController.html#method-i-update","()","<p>PUT/users/:id\n"],["upgrade","Subscription","Subscription.html#method-c-upgrade","(subscription, new_plan_id)","<p>Upgrade\n<p>new_plan_id Integer\n<p>Return boolean\n"],["valid_subdomain","TenantsController","TenantsController.html#method-i-valid_subdomain","()","<p>GET/tenants/valid_subdomain?subdomain=subdomain\n"],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>Kebab 2.x - Server Ror\n<p>Links\n<p>Web Site -(www.kebab-project.com)\n"]]}}